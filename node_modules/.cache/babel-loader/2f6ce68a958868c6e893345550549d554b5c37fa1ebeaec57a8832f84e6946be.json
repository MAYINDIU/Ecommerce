{"ast":null,"code":"var _s = $RefreshSig$();\n/* eslint-disable no-underscore-dangle */\nimport { useEffect, useState } from \"react\";\nfunction CountDown(lastDate) {\n  _s();\n  const [showDate, setDate] = useState(0);\n  const [showHour, setHour] = useState(0);\n  const [showMinute, setMinute] = useState(0);\n  const [showSecound, setDateSecound] = useState(0);\n  // count Down\n  const provideDate = new Date(lastDate);\n  // format date\n  const year = provideDate.getFullYear();\n  const month = provideDate.getMonth();\n  //   console.log(month);\n  const date = provideDate.getDate();\n  //   console.log(date);\n  const hours = provideDate.getHours();\n  //   console.log(hours);\n  const minutes = provideDate.getMinutes();\n  //   console.log(minutes);\n  const seconds = provideDate.getSeconds();\n  //   console.log(seconds);\n\n  // date calculation logic\n  const _seconds = 1000;\n  const _minutes = _seconds * 60;\n  const _hours = _minutes * 60;\n  const _date = _hours * 24;\n\n  // interval function\n  const startInterval = () => {\n    const timer = setInterval(() => {\n      const now = new Date();\n      const distance = new Date(year, month, date, hours, minutes, seconds).getTime() - now.getTime();\n      if (distance < 0) {\n        clearInterval(timer);\n        return;\n      }\n      setDate(Math.floor(distance / _date));\n      setMinute(Math.floor(distance % _hours / _minutes));\n      setHour(Math.floor(distance % _date / _hours));\n      setDateSecound(Math.floor(distance % _minutes / _seconds));\n    }, 1000);\n  };\n\n  // effect\n  useEffect(() => {\n    if (lastDate !== \"\") {\n      startInterval();\n    }\n  });\n  return {\n    showDate,\n    showHour,\n    showMinute,\n    showSecound\n  };\n}\n_s(CountDown, \"c38Qg4a8uWhEMe2UM3Xd36ZmhCI=\");\n_c = CountDown;\nexport default CountDown;\nvar _c;\n$RefreshReg$(_c, \"CountDown\");","map":{"version":3,"names":["useEffect","useState","CountDown","lastDate","_s","showDate","setDate","showHour","setHour","showMinute","setMinute","showSecound","setDateSecound","provideDate","Date","year","getFullYear","month","getMonth","date","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","_seconds","_minutes","_hours","_date","startInterval","timer","setInterval","now","distance","getTime","clearInterval","Math","floor","_c","$RefreshReg$"],"sources":["H:/WEB_CLIENT/shopo-react/src/components/Helpers/CountDown.jsx"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport { useEffect, useState } from \"react\";\n\nfunction CountDown(lastDate) {\n  const [showDate, setDate] = useState(0);\n  const [showHour, setHour] = useState(0);\n  const [showMinute, setMinute] = useState(0);\n  const [showSecound, setDateSecound] = useState(0);\n  // count Down\n  const provideDate = new Date(lastDate);\n  // format date\n  const year = provideDate.getFullYear();\n  const month = provideDate.getMonth();\n  //   console.log(month);\n  const date = provideDate.getDate();\n  //   console.log(date);\n  const hours = provideDate.getHours();\n  //   console.log(hours);\n  const minutes = provideDate.getMinutes();\n  //   console.log(minutes);\n  const seconds = provideDate.getSeconds();\n  //   console.log(seconds);\n\n  // date calculation logic\n  const _seconds = 1000;\n  const _minutes = _seconds * 60;\n  const _hours = _minutes * 60;\n  const _date = _hours * 24;\n\n  // interval function\n  const startInterval = () => {\n    const timer = setInterval(() => {\n      const now = new Date();\n      const distance =\n        new Date(year, month, date, hours, minutes, seconds).getTime() -\n        now.getTime();\n      if (distance < 0) {\n        clearInterval(timer);\n        return;\n      }\n      setDate(Math.floor(distance / _date));\n      setMinute(Math.floor((distance % _hours) / _minutes));\n      setHour(Math.floor((distance % _date) / _hours));\n      setDateSecound(Math.floor((distance % _minutes) / _seconds));\n    }, 1000);\n  };\n\n  // effect\n  useEffect(() => {\n    if (lastDate !== \"\") {\n      startInterval();\n    }\n  });\n  return { showDate, showHour, showMinute, showSecound };\n}\n\nexport default CountDown;\n"],"mappings":";AAAA;AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,SAASC,SAASA,CAACC,QAAQ,EAAE;EAAAC,EAAA;EAC3B,MAAM,CAACC,QAAQ,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACM,QAAQ,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACQ,UAAU,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACjD;EACA,MAAMY,WAAW,GAAG,IAAIC,IAAI,CAACX,QAAQ,CAAC;EACtC;EACA,MAAMY,IAAI,GAAGF,WAAW,CAACG,WAAW,CAAC,CAAC;EACtC,MAAMC,KAAK,GAAGJ,WAAW,CAACK,QAAQ,CAAC,CAAC;EACpC;EACA,MAAMC,IAAI,GAAGN,WAAW,CAACO,OAAO,CAAC,CAAC;EAClC;EACA,MAAMC,KAAK,GAAGR,WAAW,CAACS,QAAQ,CAAC,CAAC;EACpC;EACA,MAAMC,OAAO,GAAGV,WAAW,CAACW,UAAU,CAAC,CAAC;EACxC;EACA,MAAMC,OAAO,GAAGZ,WAAW,CAACa,UAAU,CAAC,CAAC;EACxC;;EAEA;EACA,MAAMC,QAAQ,GAAG,IAAI;EACrB,MAAMC,QAAQ,GAAGD,QAAQ,GAAG,EAAE;EAC9B,MAAME,MAAM,GAAGD,QAAQ,GAAG,EAAE;EAC5B,MAAME,KAAK,GAAGD,MAAM,GAAG,EAAE;;EAEzB;EACA,MAAME,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMC,KAAK,GAAGC,WAAW,CAAC,MAAM;MAC9B,MAAMC,GAAG,GAAG,IAAIpB,IAAI,CAAC,CAAC;MACtB,MAAMqB,QAAQ,GACZ,IAAIrB,IAAI,CAACC,IAAI,EAAEE,KAAK,EAAEE,IAAI,EAAEE,KAAK,EAAEE,OAAO,EAAEE,OAAO,CAAC,CAACW,OAAO,CAAC,CAAC,GAC9DF,GAAG,CAACE,OAAO,CAAC,CAAC;MACf,IAAID,QAAQ,GAAG,CAAC,EAAE;QAChBE,aAAa,CAACL,KAAK,CAAC;QACpB;MACF;MACA1B,OAAO,CAACgC,IAAI,CAACC,KAAK,CAACJ,QAAQ,GAAGL,KAAK,CAAC,CAAC;MACrCpB,SAAS,CAAC4B,IAAI,CAACC,KAAK,CAAEJ,QAAQ,GAAGN,MAAM,GAAID,QAAQ,CAAC,CAAC;MACrDpB,OAAO,CAAC8B,IAAI,CAACC,KAAK,CAAEJ,QAAQ,GAAGL,KAAK,GAAID,MAAM,CAAC,CAAC;MAChDjB,cAAc,CAAC0B,IAAI,CAACC,KAAK,CAAEJ,QAAQ,GAAGP,QAAQ,GAAID,QAAQ,CAAC,CAAC;IAC9D,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;;EAED;EACA3B,SAAS,CAAC,MAAM;IACd,IAAIG,QAAQ,KAAK,EAAE,EAAE;MACnB4B,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,CAAC;EACF,OAAO;IAAE1B,QAAQ;IAAEE,QAAQ;IAAEE,UAAU;IAAEE;EAAY,CAAC;AACxD;AAACP,EAAA,CAnDQF,SAAS;AAAAsC,EAAA,GAATtC,SAAS;AAqDlB,eAAeA,SAAS;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}